#!/bin/bash
#
#   cpd - The Copy Daemon
#
#   Copyright (C) 2017 loh.tar@googlemail.com
#
#   This program is free software; you can redistribute it and/or modify
#   it under the terms of the GNU General Public License as published by
#   the Free Software Foundation; either version 2 of the License, or
#   (at your option) any later version.
#
#   This program is distributed in the hope that it will be useful,
#   but WITHOUT ANY WARRANTY; without even the implied warranty of
#   MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
#   GNU General Public License for more details.
#
#   You should have received a copy of the GNU General Public License
#   along with this program; if not, write to the Free Software
#   Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston,
#   MA 02110-1301, USA.

declare -r me=$(basename "$0")
declare -r version="0.1pre0"
declare -r vDate="Nov 2017"

declare -r tmpDir="/tmp/$me/user-$(id -un)"
declare -r jobFile="$tmpDir/jobs"               # All jobs as key/value
declare -r jobList="$tmpDir/joblst"             # Subset of jobFile as handy table
declare -A jobData=()                           # Will filled with data of jobFile

# Colored text...
# FIXME: Add test if terminal is capable of colored output or if output goes to file/pipe
declare    txtBold=$'\e[1m'                     # Or bright, depend on your terminal
declare    txtClean=$'\e[0m'                    # All attributes off

#
# Helper Functions
#
out() {
  printf "$*\n"
}

error() {
  out "Error: $1" >&2
}

info() {
  local format="$1"
  shift
  printf "$format" "$@" >&2
}

exitError() {
  error "$*"
  exit 1
}

checkTmpDir() {
  [[ -d "$tmpDir" ]] && return

  mkdir -p -m 700 "$tmpDir"
  touch "$jobFile"
  echo "1" > "$tmpDir/next-id"
  unLock
}

checkJobId() {
  [[ "$1" =~ ^[0-9]+$ ]] || exitError "Not a positive integer: $1"

  [[ $(cut -d' ' -f1 "$jobFile" | grep -c "$1") -eq 0 ]] &&
    exitError "Job not found: $1"
}

unLock(){
  rm "$tmpDir/locked-by"  2>/dev/null
  touch "$tmpDir/not-locked"
}

setLock() {
  # Semaphore inspired by
  # http://mywiki.wooledge.org/BashFAQ/045
  local i=0

  while : ;
  do
    if rm "$tmpDir/not-locked" 2>/dev/null
    then
      echo "Locked by pid $$ at $(date -Is)" > "$tmpDir/locked-by"
      [[ $i -gt 0 ]] && info "OK\n"
      return # Good!
    else
      i=$(( i+1 ))
      if (( i == 1 ))
        then info "Try to lock2..."
        else info "."
      fi

      sleep $(echo "0.3 * $i" | bc)
      if [[ $i -eq 7 ]] ; then
        info "FAIL!\n"
        exitError "Can't get lock\n $(cat "$tmpDir/locked-by" 2>/dev/null)"
      fi
    fi
  done
}

nextJobId() {
  local id

  read id < "$tmpDir/next-id"
  echo "$(( id + 1 ))" > "$tmpDir/next-id"
  echo "$id"
}

addToJobFile() {
  # Need parms: id key value
  printf "%s:%s:%s\n" "$1" "$2" "$3" >> "$jobFile"
}

addToJobList() {
  # Need parms: ID PRIO DATE STATUS DRIVE
  printf "%s %s %s %s %s \n" "$@" >> "$jobList"
}

sortJobList() {
  sort -k 2,3 "$jobList" > "$jobList-tmp"
  mv "$jobList-tmp" "$jobList"
}

updateJobList() {
  readJobs
  rm -f "$jobList"

  read max < "$tmpDir/next-id"
  for (( id=1; id < max; id++ ))
  do
    addToJobList "$id" "${jobData["$id:PRIO"]}" "${jobData["$id:DATE"]}" \
                 "${jobData["$id:STATUS"]}" "${jobData["$id:DRIVE"]}"
  done

  sortJobList
}

modifyJob() {
  # Need parms: id key newValue
  sed -i -e "s,^\($1:$2:\).*,\1$3," "$jobFile"
}

getJobValue() {
  # Need parms: id key, Returns value
  local line=$(grep "^$1:$2:" "$jobFile")
  echo ${line#[0-9]*:[A-Z]*:} # No quotes here removes unneeded spaces
}

changeStatus() {
  # Need parms: id newStatus
  setLock
  modifyJob $1 "STATUS" $2
  [[ "STOPPING RESUME CANCEL" =~ $2 ]] && modifyJob $1 "PRIO" "0"
  [[ "running" =~ $2 ]]                && modifyJob $1 "PRIO" "1"
  [[ "stopped" =~ $2 ]]                && modifyJob $1 "PRIO" "2"
  [[ "done canceled" =~ $2 ]]          && modifyJob $1 "PRIO" "9"
  unLock
}

readJobs() {
  local key val

  jobData=()

  while read line
  do
    val=${line#[0-9]*:[A-Z]*:}
    key=${line%:${val}}
    jobData[$key]=$val
  done < "$jobFile"
}

cutLeft() {
  # Need parms: width string

  # Some effort to cut string from the left side to fit into table
  # I did't get it with some printf format :-/
  local length=${#2}
  local str=$2

  (( length > $1 )) && str="~${2:((length - $1 + 1)):$length}"

  echo "$str"
}

#
# Command Implementations
#
outJobLine() {
  local id="$1"
  local format="$2"
  local cols="$3"
  local target=$(cutLeft "20" "${jobData["$id:TARGET"]}")

  printf -v txt "$format"                                     \
    "$id" "${jobData["$id:PRIO"]}" "${jobData["$id:STATUS"]}" \
    "${jobData["$id:DONE"]}" "${jobData["$id:DRIVE"]}"        \
    "$target" "${jobData["$id:ARGUMENTS"]}"

  out "${txt:0:$cols}"
}

cmdList() {
  # TODO: Add more options for different kind of display. The are so much
  # possibilities: filters, sort order, show as ticket, selected fields...
  local type="$1"
  [[ -f "$jobFile" ]] || type="NoJobs"

  case "$type" in
    NoJobs)
      out "No jobs to list"
      ;;
    *)
      local txt=" ID PRIO STATUS   DONE  DRIVE            TARGET                ARGUMENTS"
      local format="%3s   %s  %-8s  %3s  %-15s  %-20s  %s"
      # Is that the right way to adjust to terminal width?
      local cols=$(stty size|cut -d' ' -f2)
      out "${txt:0:$cols}"
      readJobs
      ;;&

    i|-li)
      read max < "$tmpDir/next-id"
      for (( id=1; id < max; id++ ))
      do
        outJobLine "$id" "$format" "$cols"
      done
      ;;

    *)
      setLock || exit 1
      updateJobList
      unLock

      while read id prio date status drive
      do
        outJobLine "$id" "$format" "$cols"
      done < "$jobList"
      ;;

  esac
}

cmdCancel() {
  checkJobId "$1"
  local id="$1"

  out "Cancel job $id: $(getJobValue $id "ARGUMENTS")"
  changeStatus "$id" "CANCEL"
}

cmdResume() {
  checkJobId "$1"
  local id="$1"

  out "Resume job $id"
  changeStatus "$id" "RESUME"
}

cmdStop() {
  checkJobId "$1"
  local id="$1"

  out "Stop job $id"
  changeStatus "$id" "STOPPING"
}

cmdChangePrio() {
  [[ "$#" -ne 2 ]] && exitError "Need two arguments"
  checkJobId "$1"
  [[ "$2" =~ ^[0-9]+$ ]] || exitError "Not a positive integer: $2"
  (( "$2" > 8 || "$2" < 3 )) && exitError "Priority must be 3-8 not: $2"

  local id="$1"
  local prio="$2"

  local status=$(getJobValue "$1" "STATUS")
  [[ "$status" == "pending" ]] || exitError "Job is '$status', you can only change 'pending' jobs"

  out "Change priority of job $id to $prio"
  setLock
  modifyJob $id "PRIO" $prio
  updateJobList
  unLock
}

#
#
#

addNewJob() {
  # Get the destination drive
  # FIXME: As long we have plain drives all is nice, but with mappers, raid or
  # what ever other hell, I think there is now way to get the real drive(?)
  # Therefore we build poor fake drives as workaround
  local drive=$(df -P "$1" | tail -n1 | cut -d' ' -f1)   # Now /dev/foo/drive123
  if [[ "$drive" =~ /dev/mapper ]] ; then
    drive=${drive#/dev/mapper/}
    drive=${drive:0:13}           # Use only first part of full name
  else
    drive=${drive%%[0-9]*}        # Drive only matters, not partition
  fi

  checkTmpDir
  setLock
  # FIXME: Would be nice to have a progress info in DONE.
  # Could be achieved by pre find-ing all source files, sum each size and copy
  # one file after the other.
  newId=$(nextJobId)
  out "New job: $newId  cp -t $*"

  # PRIOrity is associated to STATUS as follows
  # STOPPING RESUME CANCEL running stopped pending done canceled
  #    0        0     0        1      2      3-8     9     9
  addToJobFile "$newId" "PRIO" "5"
  addToJobFile "$newId" "STATUS" "pending"
  addToJobFile "$newId" "DONE" "?"
  local date=$(printf "%(%FT%T)T" "-1")
  addToJobFile "$newId" "DATE" "$date"
  addToJobFile "$newId" "DRIVE" "$drive"
  addToJobFile "$newId" "HOME" "$PWD"        # Needed, the daemon run in /
  addToJobFile "$newId" "TARGET" "${1@Q}"    # Arguments will quoted
  shift
  addToJobFile "$newId" "ARGUMENTS" "${*@Q}"

  # Don't be lazy and call updateJobList, this way is cheaper
  addToJobList "$newId" "5" "$date" "pending" "$drive"
  sortJobList

  unLock
}

#
# Begin Main
#

# Hint the user how to use me when called without argument
[ "$#" -eq "0"  ] && set -- "-h"

while getopts :h: opt # Keep help recognition away from other options
do
  [ "$opt" != "h" -a "$OPTARG" != "h" ] && continue
  case $OPTARG in
    l)  out ""
        # Adjust -B4 in case of copyright changes
        grep -B4 -A13 -m1 "This program is free software" "$0" | cut -b2-
        out ""
        exit ; ;;

    s)  less "$0"
        exit ; ;;

    *)  out "This is ${txtBold}cpd${txtClean} - The copy daemon (v$version, $vDate)"
        out ""
        out "${txtBold}Usage:${txtClean}"
        out "  $me <dest-dir> <source>..."
        out "  $me <command> [<argument>...]"
        out ""
        out "${txtBold}Commands are:${txtClean}"
        out "  -C <job-id>        Cancel a job"
        out "  -h [c]             Show this help or when c=l License, c=s Source of $me"
        out "  -l [c]             List jobs, c=i by ID"
        out "  -p <job-id> <prio> Change job priority 3-8"
        out "  -r <job-id>        Resume a job"
        out "  -s <job-id>        Stop a job"
        out ""
        out "${txtBold}Notes:${txtClean}"
        out "  • The first form schedule a new copy task"
        out "  • The second form list or change tasks"
        out "  • The job priority is not static and affect only the start time. Highest priority is 0"
        out "  • The executed copy command will be 'cp -t <dest-dir> <source>' no extras, sorry"
        out ""
        out "${txtBold}Examples:${txtClean}"
        out "  Enqueue new copy task"
        out "    $me /media/1a/foo /media/1b/foo"
        out ""
        out "  Show status"
        out "    $me -l"
        out ""
        exit ; ;;
  esac
done

OPTIND="1"
while getopts ?C:lp:r:s: opt
do
  case $opt in

    C)  cmdCancel $OPTARG         ; exit ; ;;
    l)  shift $(( $OPTIND - 1 ))
        cmdList $1                ; exit ; ;;
    p)  shift $(( $OPTIND - 1 ))
        cmdChangePrio $OPTARG $@  ; exit ; ;;
    r)  cmdResume $OPTARG         ; exit ; ;;
    s)  cmdStop $OPTARG           ; exit ; ;;

    \?) exitError "Need help? Use: $me -h"  ; ;;

  esac
done

# At this point we have a new job to enqueue
[[ -d "$1" ]] || exitError "Destination must be directory"
addNewJob "$@"

# Check if daemon is running
if [[ -f "$tmpDir/daemon-pid" ]] ; then
  pid1=$(cat "$tmpDir/daemon-pid")
  pid2=$(ps -C $me -o pid=)
  [[ $pid1 -ne $pid2 ]] && exitError "Argh!? Daemon not found" # Should never happens

else
  echo "FIXME: Start daemon!"
fi
