#!/bin/bash
#
#   cpd - The Copy Daemon
#
#   Copyright (C) 2017 loh.tar@googlemail.com
#
#   This program is free software; you can redistribute it and/or modify
#   it under the terms of the GNU General Public License as published by
#   the Free Software Foundation; either version 2 of the License, or
#   (at your option) any later version.
#
#   This program is distributed in the hope that it will be useful,
#   but WITHOUT ANY WARRANTY; without even the implied warranty of
#   MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
#   GNU General Public License for more details.
#
#   You should have received a copy of the GNU General Public License
#   along with this program; if not, write to the Free Software
#   Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston,
#   MA 02110-1301, USA.

declare -r me=$(basename "$0")
declare -r version="0.1pre0"
declare -r vDate="Nov 2017"

declare -r tmpDir="/tmp/$me/user-$(id -un)"
declare -r jobFile="$tmpDir/jobs"               # All jobs as key/value

declare -r defPriority="2"                      # Default job priority

# Colored text...
# FIXME: Add test if terminal is capable of colored output or if output goes to file/pipe
declare    txtBold=$'\e[1m'                     # Or bright, depend on your terminal
declare    txtClean=$'\e[0m'                    # All attributes off

#
# Helper Functions
#
out() {
  printf "$*\n"
}

error() {
  out "Error: $1" >&2
}

exitError() {
  error "$*"
  exit 1
}

checkTmpDir() {
  [[ -d "$tmpDir" ]] && return

  mkdir -p -m 700 "$tmpDir"
  touch "$jobFile"
  echo "1" > "$tmpDir/next-id"
  unLock
}

checkJobId() {
  [[ "$1" =~ ^[0-9]+$ ]] || exitError "Not a positive integer: $1"

  [[ $(cut -d' ' -f1 "$jobFile" | grep -c "$1") -eq 0 ]] &&
    exitError "Job not found: $1"
}

unLock(){
  rm "$tmpDir/locked-by"  2>/dev/null
  touch "$tmpDir/not-locked"
}

setLock() {
  # Semaphore inspired by
  # http://mywiki.wooledge.org/BashFAQ/045
  local i=0

  while : ;
  do
    if rm "$tmpDir/not-locked" 2>/dev/null
    then
      echo "Locked by pid $$ at $(date -Is)" > "$tmpDir/locked-by"
      return # Good!
    else
      echo lock2 $i
      sleep 0.2
      i=$(( i+1 ))
      if [[ $i -eq 5 ]] ; then
        out "Can't get lock"
        cat "$tmpDir/locked-by" 2>/dev/null
        exit 1
      fi
    fi
  done
}

nextJobId() {
  local id

  read id < "$tmpDir/next-id"
  echo "$(( id + 1 ))" > "$tmpDir/next-id"
  echo "$id"
}

addToJobFile() {
  # Need parms: id key value
  printf "%s:%s:%s\n" "$1" "$2" "$3" >> "$jobFile"
}

modifyJob() {
  # Need parms: id key newValue
  sed -i -e "s,^\($1:$2:\).*,\1$3," "$jobFile"
}

getJobValue() {
  # Need parms: id key, Returns value
  local line=$(grep "^$1:$2:" "$jobFile")
  echo ${line#[0-9]*:[A-Z]*:} # No quotes here removes unneeded spaces
}

changeStatus() {
  # Need parms: id newStatus
  setLock
  modifyJob $1 "STATUS" $2
  unLock
}

#
# Command Implementations
#
cmdList() {
  # TODO: Add options for different kind of display. The are so much
  # possibilities, filters, sort order, show as ticket, selected fields...
  if [[ -f "$jobFile" ]] ; then
    local txt=" ID PRIO STATUS   DONE  DRIVE            TARGET                ARGUMENTS"
    # Is that the right way to adjust to terminal width?
    local cols=$(stty size|cut -d' ' -f2)
    out "${txt:0:$cols}"

    # FIXME: Holy crap! Is that slow :-/ Speed me up!
    read max < "$tmpDir/next-id"
    for (( id=1; id < max; id++ ))
    do
      printf -v txt "%3s   %s  %-8s  %3s  %-15s  %-20s  %s"   \
        "$id" "$(getJobValue $id PRIO)" "$(getJobValue $id STATUS)" \
        "$(getJobValue $id DONE)" "$(getJobValue $id DRIVE)"         \
        "$(getJobValue $id TARGET|rev|cut -c -21|rev)" "$(getJobValue $id ARGUMENTS)"

      out "${txt:0:$cols}"
    done
  else
    out "No jobs to list"
  fi
}

cmdCancel() {
  checkJobId "$1"
  local id="$1"

  out "Cancel job $id: $(getJobValue $id "ARGUMENTS")"
  changeStatus "$id" "CANCEL"
}

cmdResume() {
  checkJobId "$1"
  local id="$1"

  out "Resume job $id"
  changeStatus "$id" "RESUME"
}

cmdStop() {
  checkJobId "$1"
  local id="$1"

  out "Stop job $id"
  changeStatus "$id" "STOPPING"
}

cmdChangePrio() {
  [[ "$#" -ne 2 ]] && exitError "Need two arguments"
  checkJobId "$1"
  [[ "$2" =~ ^[0-9]+$ ]] || exitError "Not a positive integer: $2"

  local id="$1"
  local prio="$2"

  out "Change priority of job $id to $prio"
  setLock
  modifyJob $id "PRIO" $prio
  unLock
}

#
#
#

addNewJob() {
  # Get the destination drive
  # FIXME: As long we have plain drives all is nice, but with mappers, raid or
  # what ever other hell, I think there is now way to get the real drive(?)
  # Therefore we build poor fake drives as workaround
  local dest=$(df -P "$1" | tail -n1 | cut -d' ' -f1)   # Now /dev/foo/drive123
#   dest="/dev/mapper/luks-a92dcc6e-24b3-4f25-96c4-342eb7fc76dc"
  if [[ "$dest" =~ /dev/mapper ]] ; then
    dest=${dest#/dev/mapper/}
    dest=${dest:0:13}           # Use only first part of full name
  else
    dest=${dest%%[0-9]*}        # Drive only matters, not partition
  fi

  checkTmpDir
  setLock
  # FIXME: Would be nice to have a progress info in DONE.
  # Could be achieved by pre find-ing all source files, sum each size and copy
  # one file after the other.
  # NOTE: Not sure if DATE is useful
  newId=$(nextJobId)
  out "New job: $newId  cp -t $*"

  addToJobFile "$newId" "PRIO" "$defPriority"
  addToJobFile "$newId" "STATUS" "pending"
  addToJobFile "$newId" "DONE" "?"
  addToJobFile "$newId" "DATE" "$(printf "%(%FT%T)T" "-1")"
  addToJobFile "$newId" "DRIVE" "$dest"
  addToJobFile "$newId" "HOME" "$PWD"        # Needed, the daemon run in /
  addToJobFile "$newId" "TARGET" "${1@Q}"    # Arguments will quoted
  shift
  addToJobFile "$newId" "ARGUMENTS" "${*@Q}"

  unLock
}

#
# Begin Main
#

# Hint the user how to use me when called without argument
[ "$#" -eq "0"  ] && set -- "-h"

while getopts :h: opt # Keep help recognition away from other options
do
  [ "$opt" != "h" -a "$OPTARG" != "h" ] && continue
  case $OPTARG in
    l)  echo ""
        # Adjust -B4 in case of copyright changes
        grep -B4 -A13 -m1 "This program is free software" "$0" | cut -b2-
        echo ""
        exit ; ;;

    s)  less "$0"
        exit ; ;;

    *)  out "This is ${txtBold}cpd${txtClean} - The copy daemon (v$version, $vDate)"
        out ""
        out "${txtBold}Usage:${txtClean}"
        out "  $me <dest-dir> <source>..."
        out "  $me <command> [<argument>...]"
        out ""
        out "${txtBold}Commands are:${txtClean}"
        out "  -C <job-id>        Cancel a job"
        out "  -h [c]             Show this help or when c=l License, c=s Source of $me"
        out "  -l                 List jobs"
        out "  -p <job-id> <prio> Change job priority"
        out "  -r <job-id>        Resume a job"
        out "  -s <job-id>        Stop a job"
        out ""
        out "${txtBold}Notes:${txtClean}"
        out "  • The first form schedule a new copy task"
        out "  • The second form list or change tasks"
        out "  • The executed copy command will be 'cp -t <dest-dir> <source>' no extras, sorry"
        out ""
        out "${txtBold}Examples:${txtClean}"
        out "  Enqueue new copy task"
        out "    $me /media/1a/foo /media/1b/foo"
        out ""
        out "  Show status"
        out "    $me -l"
        out ""
        exit ; ;;
  esac
done

OPTIND="1"
while getopts ?C:lp:r:s: opt
do
  case $opt in

    C)  cmdCancel $OPTARG         ; exit ; ;;
    l)  cmdList                   ; exit ; ;;
    p)  shift $(( $OPTIND - 1 ))
        cmdChangePrio $OPTARG $@  ; exit ; ;;
    r)  cmdResume $OPTARG         ; exit ; ;;
    s)  cmdStop $OPTARG           ; exit ; ;;

    \?) echo "Need help? Use: $me -h" >&2
        exit 1                           ; ;;

  esac
done

# At this point we have a new job to enque
[[ -d "$1" ]] || exitError "Destination must be directory"
addNewJob "$@"

# Check if daemon is running
if [[ -f "$tmpDir/daemon-pid" ]] ; then
  pid1=$(cat "$tmpDir/daemon-pid")
  pid2=$(ps -C $me -o pid=)
  [[ $pid1 -ne $pid2 ]] && exitError "Argh!? Daemon not found" # Should never happens

else
  echo "FIXME: Start daemon!"
fi
