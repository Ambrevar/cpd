#!/bin/bash
#
#   cpd - The Copy Daemon
#
#   Copyright (C) 2017 loh.tar@googlemail.com
#
#   This program is free software; you can redistribute it and/or modify
#   it under the terms of the GNU General Public License as published by
#   the Free Software Foundation; either version 2 of the License, or
#   (at your option) any later version.
#
#   This program is distributed in the hope that it will be useful,
#   but WITHOUT ANY WARRANTY; without even the implied warranty of
#   MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
#   GNU General Public License for more details.
#
#   You should have received a copy of the GNU General Public License
#   along with this program; if not, write to the Free Software
#   Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston,
#   MA 02110-1301, USA.

declare -r me=$(basename "$0")
declare -r version="0.1pre3"
declare -r vDate="Nov 2017"
declare -r simulationMode="1"
declare    optRecursive="0"
declare    optMerge="0"
declare    optNoProgress="0"
declare    optExtraCopy=""

declare -r tmpDir="/tmp/$me/user-$(id -un)"
declare -r jobFile="$tmpDir/jobs"               # All jobs as key/value
declare -r jobList="$tmpDir/joblst"             # Subset of jobFile as handy table
declare -A jobData=()                           # Will filled with data of jobFile
declare -A jobPids=()                           # PIDs of our jobs by our own ID
declare    recheckJobList="0"                   # Set to 1 when some job has finished
declare    stopRunning="0"                      # Set to 1 by command '-D -'
declare    screenWidth="100"                    # Will adjusted by setScreenWidth()
declare    daemonPID="0"                        # Used to notify/check our Daemon

# Colored text and other escape sequences
# FIXME: Add test if terminal is capable of colored output or if output goes to file/pipe
declare    txtBold=$'\e[1m'                     # Or bright, depend on your terminal
declare    txtClean=$'\e[0m'                    # All attributes off
declare    clearLine=$'\e[2K'                   # Ã„h, yes
declare    oneLineUp=$'\e[1A'                   # Need more lines? 3A=three lines up

#
# Helper Functions
#
out() {
  printf "$*\n"
}

error() {
  out "Error: $1" >&2
}

info() {
  local format="$1"
  shift
  printf "$format" "$@" >&2
}

exitGood() {
  info "$1\n"
  exit 0
}

exitError() {
  error "$*"
  exit 1
}

checkTmpDir() {
  [[ -d "$tmpDir" ]] && return

  mkdir -p -m 700 "$tmpDir"
  touch "$jobFile"
  touch "$jobList"
  echo "1" > "$tmpDir/next-id"
  unLock
}

checkJobId() {
  [[ "$1" =~ ^[0-9]+$ ]] || exitError "Not a positive integer: $1"

  [[ $(cut -d' ' -f1 "$jobFile" | grep -c "$1") -eq 0 ]] &&
    exitError "Job not found: $1"
}

checkStatus() {
  # Need parms: id status change
  local status=$(getJobValue "$1" "STATUS")
  local change=${3-"change"}
  [[ "$status" == "$2" ]] || exitError "Job $1 is '$status', you can only $change '$2' jobs"
}

unLock(){
  rm "$tmpDir/locked-by"  2>/dev/null
  touch "$tmpDir/not-locked"
}

setLock() {
  # Call setLock only from top level functions like cmdFoo,
  # we want protect from second process not the own process
  # Mutex functionality inspired by
  # http://mywiki.wooledge.org/BashFAQ/045

  local i=0 freeTry=3

  while : ;
  do
    if rm "$tmpDir/not-locked" 2>/dev/null
    then
      echo "Locked by pid $$ at $(date -Is)" > "$tmpDir/locked-by"
      (( i >= freeTry )) && info "OK\n"
      return 0 # Good!
    else
      (( i++ ))
      # Try some without to print info
      if (( i > freeTry ))
        then info "."
      elif (( i == freeTry ))
        then info "Try to lock..."
      fi

      sleep $(echo "0.3 + 0.4 * $i" | bc)
      if (( i == 7 )) ; then
        info "FAIL!\n"
        error "Can't get lock\n$(cat "$tmpDir/locked-by" 2>/dev/null)"
        return 1 # Bad!
      fi
    fi
  done
}

nextJobId() {
  local id

  read id < "$tmpDir/next-id"
  echo "$(( id + 1 ))" > "$tmpDir/next-id"
  echo "$id"
}

addToJobFile() {
  # Need parms: id key value
  printf "%s:%s:%s\n" "$1" "$2" "$3" >> "$jobFile"
}

updateJobList() {
  # Do NOT call updateJobList after add or change a job!
  # That would confuse processJobList
  readJobs
  [[ -s "$jobFile" ]] || return
  rm -f "$jobList"

  read max < "$tmpDir/next-id"
  for (( id=1; id < max; id++ ))
  do
#   echo "$id" "${jobData["$id:STATUS"]}" "${jobData["$id:DRIVE"]}"
    printf "%s %s %s %s %s\n"                                 \
      "$id" "${jobData["$id:PRIO"]}" "${jobData["$id:DATE"]}" \
      "${jobData["$id:STATUS"]}" "${jobData["$id:DRIVE"]}"    \
      >> "$jobList"
  done

  sort -k 2,3 "$jobList" > "$jobList-tmp"
  mv "$jobList-tmp" "$jobList"
}

modifyJob() {
  # Need parms: id key newValue
  sed -i -e "s,^\($1:$2:\).*,\1$3," "$jobFile"
}

getJobValue() {
  # Need parms: id key, Returns value
  local line=$(grep "^$1:$2:" "$jobFile")
  echo ${line#[0-9]*:[A-Z]*:} # No quotes here removes unneeded spaces
}

changeStatus() {
  # Need parms: id newStatus
  modifyJob $1 "STATUS" $2

  if [[ "STOPPING CANCEL" =~ $2 ]] ; then
    modifyJob $1 "PRIO" "0"
  elif [[ "running starting" =~ $2 ]] ; then
    modifyJob $1 "PRIO" "1"
  elif [[ "RESUME STOPPED" =~ $2 ]] ; then
    modifyJob $1 "PRIO" "2"
  elif [[ "done canceled killed ERROR NOSTART" =~ $2 ]] ; then
    modifyJob $1 "PRIO" "9"
  fi
}

readJobs() {
  local key val

  while read line
  do
    val=${line#[0-9]*:[A-Z]*:}
    key=${line%:${val}}
    jobData[$key]=$val
  done < "$jobFile"
}

setScreenWidth() {
  screenWidth=$(stty size 2>/dev/null |cut -d' ' -f2)
  # If stty has no success, e.g. running as daemon, in a pipe or some
  # dumb terminal, ensure not all is cut from output
  # https://github.com/loh-tar/cpd/issues/4
  (( screenWidth )) || screenWidth="9999"
}

cutLeft() {
  # Need parms: width string

  # Some effort to cut string from the left side to fit into table
  # I did't get it with some printf format :-/
  local -n str=$2       # -n =by reference
  local length=${#str}

  (( length > $1 )) && str="~${str:((length - $1 + 1)):$length}"
}

#
# Command Implementations
#
outJobLine() {
  local id="$1"
  local format="$2"

  local target="${jobData["$1:TARGET"]}"
  cutLeft "20" target

  printf -v txt "$format"                                     \
    "$id" "${jobData["$id:PRIO"]}" "${jobData["$id:STATUS"]}" \
    "${jobData["$id:SIZE"]}" "${jobData["$id:DRIVE"]}"        \
    "$target" "${jobData["$id:FILES"]}"

  out "${txt:0:$screenWidth}"
}

cmdList() {
  # TODO: Add more options for different kind of display. The are so much
  # possibilities: filters, sort order, show as ticket, selected fields...
  local type="$1"
  [[ -f "$jobFile" ]] || type="NoJobs"

  setScreenWidth

  case "$type" in
    e|-le)
      read max < "$tmpDir/next-id"
      for (( id=1; id < max; id++ ))
      do
        [[ -s "$tmpDir/error.log-job-$id" ]] || continue
        out ">>>>> Error log of job $id"
        cat "$tmpDir/error.log-job-$id"
        out ""
      done
      ;;

    l|-ll)
      cat "$tmpDir/job.log"
      ;;

    NoJobs)
      out "No jobs to list"
      ;;

    *)
      local txt=" ID PRIO STATUS   SIZE  DRIVE            TARGET                FILES"
      local format="%3s   %s  %-8s %4s  %-15s  %-20s  %s"
      out "${txt:0:$screenWidth}"
      readJobs
      ;;&

    i|-li)
      read max < "$tmpDir/next-id"
      for (( id=1; id < max; id++ ))
      do
        outJobLine "$id" "$format"
      done
      ;;

    *)
      setLock || exit 1
      updateJobList
      unLock

      while read id prio date status drive
      do
        outJobLine "$id" "$format"
      done < "$jobList"
      ;;

  esac
}

getDaemonPid() {
  # Check if daemon is running
  if [[ -f "$tmpDir/daemon-pid" ]] ; then
    daemonPID=$(< "$tmpDir/daemon-pid")
    local pid2=($(ps -C $me -o pid=))
    [[ "${pid2[*]}" =~ "$daemonPID" ]] || exitError "FATAL: Daemon not found" # Should never happens
    return 0
  else
    daemonPID="0"
    return 1
  fi
}

notifyDaemon() {
  # Instead of notify the daemon, it would be possible to cancel/resume/stop
  # the job directly. I don't know whats best, you?

  if getDaemonPid ; then
    kill -USR1 "$daemonPID"
    return 0
  else
    # info "Hint: No running daemon\n"
    return 1
  fi
}

cmdCancel() {
  # Need parms: id
  checkJobId "$1"

  if [[ $(getJobValue "$1" "PRIO") == "9" ]] ; then
    exitError "Job $1 status is: $(getJobValue "$1" "STATUS")"
  fi

  out "Cancel job $1: $(getJobValue $1 "FILES")"
  setLock || exitError "Job not canceled"
  changeStatus "$1" "CANCEL"
  unLock

  notifyDaemon
}

cmdResume() {
  # Need parms: id
  checkJobId "$1"
  checkStatus "$1" "STOPPED" "resume"

  out "Resume job $1"
  setLock || exitError "Job not resumed"
  changeStatus "$1" "RESUME"
  unLock

  notifyDaemon
}

cmdStop() {
  # Need parms: id
  checkJobId "$1"
  checkStatus "$1" "running" "stop"

  out "Stop job $1"
  setLock || exitError "Job not stopped"
  changeStatus "$1" "STOPPING"
  unLock

  notifyDaemon
}

cmdChangePrio() {
  # Need parms: id prio
  [[ "$#" -ne 2 ]] && exitError "Need two arguments"
  checkJobId "$1"
  [[ "$2" =~ ^[0-9]+$ ]] || exitError "Not a positive integer: $2"
  (( "$2" > 8 || "$2" < 3 )) && exitError "Priority must be 3-8 not: $2"

  checkStatus "$1" "pending"

  out "Change priority of job $1 to $2"
  setLock || exitError "Job not changed"
  modifyJob $1 "PRIO" $2
  unLock
}

cmdTidy() {
  getDaemonPid && exitError "You like it tidy? Get rid of the beast first!"
  [[ -d $tmpDir ]] || exitGood "Nothing to tidy up"

  setLock || exitError "Oops!? I will better do nothing"

  rm -rf $tmpDir
  exitGood "Everything removed"
}

cmdProcess() {
  notifyDaemon && exitGood "Daemon already running with pid $daemonPID is triggered to do the job"

  cd "$tmpDir"
  set -o monitor
  trap "recheckJobList=1" USR1 2>/dev/null
  trap "stopRunning=1; info '${clearLine}Received signal to stop, will wait for running jobs\n'" USR2 2>/dev/null
  trap checkChilds CHLD

  echo "$$" > "$tmpDir/daemon-pid"
  recheckJobList="1"

  while (( recheckJobList ))
  do
    (( ! ${#jobPids[*]} && stopRunning )) && break
    processJobList
  done

  rm "$tmpDir/daemon-pid"

  if (( stopRunning )) ; then
    info "Processing aborted by signal\n"
    stopRunning="0"
  else
    info "All done\n"
  fi
}

cmdDaemonize() {
  case $1 in
    -D-) shift; set -- "stop"   ; ;;
    -D+) shift; set -- "start"  ; ;;
      *) shift; ;;
  esac

  (( $# )) ||  set -- "status"

  case $1 in
    start|+)
      # Thanks to Mike S
      # https://stackoverflow.com/a/29107686
      local meFullPath=$(which ${BASH_SOURCE[0]})

      case $2 in
        DAEMON) # 3. doomed
          checkTmpDir
          exec >"$tmpDir/daemon-out.log"
          exec 2>"$tmpDir/daemon-error.log"
          exec 0</dev/null

          printf "%(%FT%T)T cpd daemon started with pid $$\n" "-1"

          # Mike suggest to run a daemon in / but I think that should be ok
          cd "$tmpDir"

          # FIXME: This part is almost a copy of cmdProcess,
          # split it into parts/functions to reduce redundancy
          set -o monitor
          trap "recheckJobList=1" USR1 2>/dev/null
          trap "stopRunning=1; info '${clearLine}Received signal to stop, will wait for running jobs\n'" USR2 2>/dev/null
          trap checkChilds CHLD
          echo "$$" > "$tmpDir/daemon-pid"
          recheckJobList="1"

          # FIXME: Improve sleep state and communication with daemon.
          # Read from socket or something instead only to trigger/trap and
          # running pointless every a view seconds only to catch the trap.
          # Or perhaps by kill -STOP yourself someway
          local i="0"
          while (( ! stopRunning && i < 60 )) # Finish after ~10min, see sleep 10
          do

            while (( recheckJobList ))
            do
              (( ! ${#jobPids[*]} && stopRunning )) && break
              printf "%(%FT%T)T Go to work\n" "-1"
              processJobList
              i="0"
            done

            stopRunning="0"
            recheckJobList="0"
            printf "%(%FT%T)T Sleep\n" "-1"
            sleep 10 # Don't sleep to long, but long enough not to bother
            printf "%(%FT%T)T Wakeup\n" "-1"
            (( i++ ))
          done

          printf "%(%FT%T)T Exit with pid $$\n" "-1"
          rm "$tmpDir/daemon-pid"
          exit 0
        ;;

        BANISHMENT) # 2. child
          # umask 0 # Mike does this, but for now we don't want a daemon running
                    # as an other user than the caller (?)
          $meFullPath -D start DAEMON  >/dev/null 2>/dev/null </dev/null &
          # FIXME: Print to tty like Mike, No \n, for now
          info "cpd daemon started with pid $!"
          exit 0
        ;;

        *) # 1. entry point
          getDaemonPid && { info "Daemon is already running with pid $daemonPID\n"; exit 0; }
          setsid $meFullPath -D start BANISHMENT  &
        ;;
      esac
      exit 0
    ;;

    *) # FIXME: This cause error "stty: 'standard input': Inappropriate ioctl for device"
       #        when going to daemon mode. That's why we do it now
      setScreenWidth
    ;;&

    stop|-)
      getDaemonPid || exitGood "No running daemon to stop"
      kill -USR2 "$daemonPID"

      # Let's do some fancy stuff
      local  x=("-" "\\" "|" "/")  i="0"
      while [[ -f "$tmpDir/daemon-pid" ]] && (( i < 30 ))
      do
        # local txt=<("$tmpDir/processStatus")      # Not working, something locked
        # local txt=$(cat "$tmpDir/processStatus")  # Works
        # FIXME: Print three lines info text and hourglass (fix at processJobList too)
        #        and wait until key pressed
        # info "\r%s Wait for daemon with pid $daemonPID to stop %s" "${x[((i++ % 4))]}" "$txt"
        # info "$oneLineUp\r$clearLine%s  %s\nWait for daemon with pid $daemonPID to stop %s" "${x[((i++ % 4))]}" "$txt"
        info "\r%s Wait for daemon with pid $daemonPID to stop " "${x[((i++ % 4))]}"
        sleep 0.3;
      done

      if [[ -f "$tmpDir/daemon-pid" ]] ; then
        info " - is still running\n"
        cat "$tmpDir/processStatus" | cut -c-$screenWidth
        exit 1
      else
        info " - OK\n"
        exit 0
      fi
    ;;

    status)
      if getDaemonPid ; then
        out "Daemon is running with pid $daemonPID"
        cat "$tmpDir/processStatus" | cut -c-$screenWidth
        # Thanks to Daniel
        # https://unix.stackexchange.com/a/325581
        if compgen -G "$tmpDir/job-status-*" > /dev/null; then
          out ""
          out "Running jobs:"
          cat "$tmpDir"/job-status-* | cut -c-$screenWidth
        fi
      else
        out "No running daemon"
      fi

      if [[ -s "$jobFile" ]] ; then
        out "\nJobs by status:"
        for s in "Pending" "Done" "Canceled" "Killed" "Error"
        do
          local jobCount=$(grep -i "STATUS:$s" "$tmpDir/jobs" | wc -l)
          (( jobCount )) || continue
          local -a jobs=($(grep -i "STATUS:$s" "$tmpDir/jobs" | cut -d: -f1))
          printf -v txt "  %-8s %5s: %s" "$s" "($jobCount)" "${jobs[*]}"
          out "$txt"
        done
      else
        out "\nNo jobs"
      fi

      exit 0
    ;;

    *)
      exitError "What is '$1'? Try '$me -h' for help"
    ;;

  esac
}

#
# Here is the Beef!
#

startJob() {
  # Need parms: id
  procInfo "$1" "Start"
  arg=${jobData["$1:FILES"]}

if (( simulationMode )) ; then
  local cmd2 st=$((($RANDOM % 9) * 2)) # SleepTime
fi

  local cmd="cp${jobData["$1:CPYOPT"]} ${jobData["$1:TARGET"]}"

  changeStatus "$1" "starting"

  local jobHome="${jobData["$1:HOME"]}"

  # Assume we have only wrong HOME settings in our test data,
  # force an error when sleep time is 4
  (( simulationMode && st != 4 )) && jobHome="$HOME"

  if ! cd "$jobHome" 2>/dev/null ; then
    error "Job home is gone: ${jobData["$1:HOME"]}" 2>"$tmpDir/error.log-job-$1"
    changeStatus "$1" "NOSTART"
    procInfo "$1" "StartERR"
    return
  fi


  (
    local err="0" i="0"

    if (( optNoProgress  )) ; then
    # FIXME: This solution with xargs call for each file cp,
    # but I think it should only do one call with all files

if (( simulationMode )) ; then
      case $st in
        0)  cmd2='echo "StartERR $1"; SomeWrongComand;' ; ;;
        2)  cmd2='echo "ERRORJob $1"; sleep ${st}; echo "What ever was wrong" >&2; exit 1;' ; ;;
        *)  cmd2='echo "SLEEPJob $1 - ${st}s with file: xfile"; sleep ${st};' ; ;;
      esac

      # FIXME: I didn't got it all together working simply by cmd=cmd2
      # So make a special treatment for each simulation type, not so nice
      cmd2=${cmd2/\$1/$1}
      cmd2=${cmd2//\$\{st\}/$st}
      cut -f2- "$tmpDir/job-files-$1" | tr '\n' '\000' | xargs -0 -I xfile  \
        bash -c "eval  $cmd2" >"$tmpDir/msg.log-job-$1" 2>"$tmpDir/error.log-job-$1"

      # FIXME:Should run together with xargs line
      printf "%(%FT%T)T [Job $1]\nFake Job: %s\nTrue Job: %s %s\n\n" "-1" \
        "$cmd2" "$cmd" "${jobData["$1:FILES"]}" >> "$tmpDir/job.log"
else
      # Reading file names is tricky, discard size and convert to zero terminated
      # list to ensure spaces are properly handled
      cut -f2- "$tmpDir/job-files-$1" | tr '\n' '\000' | xargs -0   \
        cp ${jobData["$1:CPYOPT"]} "${jobData["$1:TARGET"]}"        \
          > "$tmpDir/msg.log-job-$1" 2>"$tmpDir/error.log-job-$1"

      # FIXME:Should run together with the xargs line
      printf "%(%FT%T)T [Job $1] %s %s\n" "-1" "$cmd" "${jobData["$1:FILES"]}" \
        >> "$tmpDir/job.log"
fi
      err="$?"
      i="${jobData["$1:FCOUNT"]}"

    else
      local total="0"

      writeJobStatus() {
        printf "[Job: %3s, %4s] [Done: %3s%%] [ToDo: Files: %s, Bytes: %s]\n"  \
          "$1" "${jobData["$1:SIZE"]}"                        \
          "$(( 100 * $total / ${jobData["$1:BYTES"]} ))"      \
          "$(( ${jobData["$1:FCOUNT"]} - $i ))"               \
          "$(( ${jobData["$1:BYTES"]} - $total ))"            \
          > "$tmpDir/job-status-$1" ;}

      while read size file
      do
        (( i++ ))

if (( simulationMode )) ; then
        # Using logarithm of file size as sleep time
        # https://stackoverflow.com/a/7962297
        st=$(echo "scale=2; l($size)/l(4)" | bc -l)

        case "$(($RANDOM % 9))" in
          0)  cmd2='echo "ERRORJob $1"; sleep ${st}; echo "What ever was wrong" >&2; exit 1;' ; ;;
          *)  cmd2='echo "SLEEPJob $1 - ${st}s with file: ($size) $file"; sleep ${st};' ; ;;
        esac

        cmd2=${cmd2/\$1/$1}
        cmd2=${cmd2//\$\{st\}/$st}
        cmd2=${cmd2/\$size/$size}
        cmd2=${cmd2/\$file/$file}
        printf "%(%FT%T)T [Job $1]\nFake Job: %s\nTrue Job: %s %s\n\n" "-1" \
          "$cmd2" "$cmd" "$file" >> "$tmpDir/job.log"

       (eval $cmd2 >> "$tmpDir/msg.log-job-$1" 2>>"$tmpDir/error.log-job-$1")
else
        printf "%(%FT%T)T [Job $1] %s %s\n" "-1" "$cmd" "$file"       \
          >> "$tmpDir/job.log"

        cp ${jobData["$1:CPYOPT"]} "${jobData["$1:TARGET"]}" "$file"  \
          >> "$tmpDir/msg.log-job-$1" 2>>"$tmpDir/error.log-job-$1"
fi

        if (( $? )) ; then
          err="1"
        else
          let total+=size
          if (( $SECONDS > 1 )) ; then
            # Doing modifyJob here may be expensive, we waste already
            # a lot of time. TODO:If we want an updated jobFile we could
            # parse the job-status files in the daemon idle time
            writeJobStatus "$1"
            SECONDS="0"
          fi
        fi

      done < "$tmpDir/job-files-$1"
      # Instead of rm we could finally writeJobStatus, but I think we should
      # only keep a file for running jobs
      rm "$tmpDir/job-status-$1" 2>/dev/null
    fi

    setLock || exit $err # Could that happens?
    # Calc here not with BYTES but FCOUNT

    modifyJob "$1" "DONE" "$(( 100 * $i / ${jobData["$1:FCOUNT"]} ))%"
    unLock
    exit $err
  )&


  cd "$OLDPWD"
  jobPids[$1]="$!"
  modifyJob "$1" "PID" "$!" # FIXME: After a quick error would that be a wrong info
}

check4Pid() {
  # Need parms: id action
  if ! (( ${jobPids[$1]} )) ; then
    # Should never be printed
    error "FATAL: Job $1 is not in my pid list. Can't $2 job"
    return 1
  fi

  return 0
}

stopJob() {
  # Need parms: id
  procInfo "$1" "Stop"
  check4Pid $1 "stop" || return
  changeStatus "$1" "STOPPED"
  kill -STOP "${jobPids[$1]}"
}

resumeJob() {
  # Need parms: id
  procInfo "$1" "Resume"
  check4Pid $1 "resume" || return
  changeStatus "$1" "running"
  kill -CONT "${jobPids[$1]}"
}

cancelJob() {
  # Need parms: id
  if (( ${jobPids[$1]} )) ; then
    # >>>>>> Don't bother with kill-notice, Thanks to pix
    # https://stackoverflow.com/a/23645819
    # Anyway is it ugly because we don't get this way the 137 exit code in
    # checkChilds. And to avoid to get twice a procInfo we remove the pid first
    local pid=${jobPids[$1]}
    unset jobData["$1:PID"]
    unset jobPids[$1]
    disown "$pid" 2>/dev/null
    kill -KILL "$pid" 2>/dev/null
    changeStatus "$1" "killed"
    procInfo "$1" "Killed"
    modifyJob "$1" "PID" " "
    # <<<<<< end ugly
    # >>>>>> That's all what here should be done
    # kill -KILL "${jobPids[$1]}"
    # modifyJob "$1" "PID" " "
    # <<<<<< end good!
  else
    procInfo "$1" "Cancel"
    changeStatus "$1" "canceled"
  fi
}

procInfo() {
  # Need parms: id change
  local format="%-8s[%3s] [%-15s] %20s <- %s"

  local target="${jobData["$1:TARGET"]}"
  cutLeft "20" target

  printf -v txt "$format" "$2" "$1" "${jobData["$1:DRIVE"]}" \
                "$target" "${jobData["$1:FILES"]}"

  info "%s\n" "$clearLine${txt:0:$screenWidth}"
}

checkChilds() {
  # Thanks to michaelt
  # https://stackoverflow.com/a/21750255
  for id in ${!jobPids[*]}; do
    local pid=${jobPids[$id]}
    if kill -0 $pid 2>/dev/null ; then
      # Set job to running if not already done
      [[ ${jobData["$id:PID"]} ]] && continue
      changeStatus "$id" "running"
      jobData["$id:PID"]="$pid"
    else
      recheckJobList="1"
      wait $pid 2>/dev/null
      local x=$?
#       echo ">>Finished>$id<$pid:x=$x<<"
      if (( x == 0 )) ; then
        changeStatus "$id" "done"
        procInfo "$id" "Done"
      else
        if (( x == 127 )) ; then
          # Start up error, should never happens
          changeStatus "$id" "NOSTART"
          procInfo "$id" "StartERR"
        elif (( x == 137 )) ; then
          changeStatus "$id" "killed"
          procInfo "$id" "Killed"
        else
          # Error while running
          changeStatus "$id" "ERROR"
          procInfo "$id" "ERROR"
        fi
      fi

      unset jobData["$id:PID"]
      unset jobPids[$id]
    fi
  done
}

processJobList() {
  setLock || { error "List not processed"; return 1; }
  updateJobList
  setScreenWidth

  local busyDrives=()
  local stoppedJobs=()
  local waitingJobs=()
  recheckJobList="0"

  while read id prio date status drive
  do
    case $prio in
      0)  case $status in
            STOPPING) stopJob "$id"; stoppedJobs+=($id); ;;
            CANCEL)   cancelJob "$id"; ;;
            *)        error "FATAL: Ignored: ID:$id PRIO:$prio STATUS:$status"; ;;
          esac
      ;;

      1)  busyDrives+=($drive)
      ;;

      2)  case $status in
            RESUME)   if [[ ${busyDrives[@]} =~ $drive ]] ; then
                        waitingJobs+=($id)
                      else
                        busyDrives+=($drive); resumeJob "$id"
                      fi; ;;
            STOPPED)  stoppedJobs+=($id); ;;
            *)        error "FATAL: Ignored: ID:$id PRIO:$prio STATUS:$status"; ;;
          esac
      ;;

      [3-8])
          if [[ ${busyDrives[@]} =~ $drive ]] ; then
            waitingJobs+=($id)
          else
            (( ! stopRunning )) && { busyDrives+=($drive); startJob "$id"; }
          fi
      ;;

      9)  # No more todo, only done and canceled jobs left
          break
      ;;

      *)  # Should never happens
          error "FATAL: Ignored: ID:$id PRIO:$prio STATUS:$status"
      ;;

    esac

    (( recheckJobList )) && break

  done < "$jobList"

  unLock

  printf -v running "[Running: %s]" "${!jobPids[*]}"
  printf -v busydrv "[Busy Drives: %s]" "${busyDrives[*]}"
  printf -v stopped "[Stopped: %s]" "${stoppedJobs[*]}"
  printf -v waiting "[Waiting: %s]" "${waitingJobs[*]}"
  printf -v txt "%s %s %s %s" "$running" "$stopped" "$waiting" "$busydrv"

  info "%s  \r" "${txt:0:(($screenWidth - 2))}"
  printf "%s\n" "$txt" > "$tmpDir/processStatus"

  # Let's do some fancy stuff
  local x=("-" "\\" "|" "/")  i="0"
  while (( ${#jobPids[*]} && ! recheckJobList ))
  do
    info "%s\r" "${x[((i++ % 4))]}"
    sleep 0.3
  done

  info "$clearLine"
}

addNewJob() {
  # Get the destination drive
  # FIXME: As long we have plain drives all is nice, but with mappers, raid or
  # what ever other hell, I think there is now way to get the real drive(?)
  # Therefore we build poor fake drives as workaround
  local drive=$(df -P "$1" | tail -n1 | cut -d' ' -f1)   # Now /dev/foo/drive123
  if [[ "$drive" =~ /dev/mapper ]] ; then
    drive=${drive#/dev/mapper/}
    drive=${drive:0:13}                   # Use only first part of full name
# elif FIXME fill me
  else
    drive=${drive%%[0-9]*}                # Drive only matters, not partition
  fi

  # Examine optExtraCopy
  # Remove, we do it: -R, -r, --recursive
  # Not allowed: -i, --interactive, -T, --no-target-directory --help --version
  # Special case: -a, --archive
  # FIXME What else?
  local copyOptions=""
  for o in $optExtraCopy
  do
    if [[ $o =~ ^-[0-9a-Z][0-9a-Z]+ ]] ; then
      exitError "Not allowed yet, sorry. Please split to single options: $o"
    elif [[ $o =~ ^-[iT] ]] ; then
      exitError "Not allowed, sorry: $o"
    elif [[ "--recursive --no-target-directory --help --version" =~ $o ]] ; then
      exitError "Not allowed, sorry: $o"
    elif [[ $o =~ ^-[rR] ]] ; then
      optRecursive="1"
    elif [[ $o =~ ^-a || "$o" == "--archive" ]] ; then
      optRecursive="1"
      copyOptions="$copyOptions -a"
    else
      copyOptions="$copyOptions $o"
    fi
  done

  if (( optMerge )) ; then
    copyOptions="$copyOptions --backup=numbered"
  else
    copyOptions="$copyOptions --parents"
  fi

  checkTmpDir
  newJobFiles=$(mktemp --tmpdir="$tmpDir" new-job-files.XXXX)
  trap "rm $newJobFiles" EXIT

  local target=$(realpath "$1")

  while shift; (( $# ))
  do
    [[ ! -e "$1" ]] && exitError "File not found: $1"

    if [[ -d "$1" ]] ; then
      if (( ! optRecursive )) ; then
        # Remove directories from file list. They would only cause
        # warnings when running cp without -r
        info "Omit directory: $1\n"
        continue
      else
        find "$1" -type f -printf "%s\t%p\n" >> "$newJobFiles"
      fi
      continue
    fi

    local size=$(stat -c%s "$1")
    printf "$size\t$1\n" >> "$newJobFiles"
  done

  [[ -s "$newJobFiles" ]] || exitError "No files to copy"
  # Don't copy files twice
  # Remove leading ./ from files, ensure file names match and looks nicer
  sed -e "s/\t\.\//\t/" "$newJobFiles" | sort | uniq > "$newJobFiles-uniq"

  mv -f "$newJobFiles-uniq" "$newJobFiles"

  # Collect some statistics
  local count=$(wc -l "$newJobFiles" | cut -d' ' -f1)
  # Thanks Dimitre, https://stackoverflow.com/a/3096575
  local bytes=$(cut -f1 "$newJobFiles" | paste -sd+ | bc)

  # Build small file list only for user hint
  local files=$(cut -f2 "$newJobFiles" | head -n20 | paste -sd' ')
  # 200 is arbitrary chosen, long enough to fill one line
  (( ${#files} > 200 )) && files="${files:0:199}~"

  setLock || exitError "Job not added"

  newId=$(nextJobId)
  local total=$(numfmt --to=si $bytes)
  local bytesPerFile=$(( bytes / count ))

  out "New job: $newId ($count files, $total total, $(numfmt --to=si $bytesPerFile) avg size)"
  out "Target : $target"
  out "Files  : ${files}"
  (( ${#copyOptions} )) && out "Options: $copyOptions"

  mv "$newJobFiles" "$tmpDir/job-files-$newId"

  # PRIOrity is associated to STATUS as follows
  # STOPPING RESUME CANCEL running stopped pending done canceled
  #    0        0     0        1      2      3-8     9     9
  addToJobFile "$newId" "PRIO" "5"
  addToJobFile "$newId" "STATUS" "pending"
  addToJobFile "$newId" "DONE" "0%"
  printf -v date "%(%FT%T)T" "-1"
  addToJobFile "$newId" "DATE" "$date"
  addToJobFile "$newId" "DRIVE" "$drive"
  addToJobFile "$newId" "HOME" "$PWD"        # Needed, the daemon run in /
  addToJobFile "$newId" "TARGET" "$target"
  addToJobFile "$newId" "FILES" "$files"
  addToJobFile "$newId" "FCOUNT" "$count"
  addToJobFile "$newId" "BYTES" "$bytes"
  addToJobFile "$newId" "SIZE" "$total"
  addToJobFile "$newId" "CPYOPT" "$copyOptions -t"

  unLock

  trap - EXIT

  notifyDaemon
}

#
# Begin Main
#

# Hint the user how to use me when called without argument
[ "$#" -eq "0"  ] && set -- "-h"

while getopts :Hh opt # Keep help recognition away from other options
do
  case $opt in
    h)  if   [[ "-hl" == $1 || "l" == $2 ]] ; then opt="l"
        elif [[ "-hs" == $1 || "s" == $2 ]] ; then opt="s"; fi; ;;
    H) : ; ;;
    *)  continue; ;;
  esac

  case $opt in
    l)  out ""
        # Adjust -B4 in case of copyright changes
        grep -B4 -A13 -m1 "This program is free software" "$0" | cut -b2-
        out ""
        exit ; ;;

    s)  less "$0"
        exit ; ;;

    *)  if [[ $opt == "H" ]] ; then
        out "This is ${txtBold}cpd${txtClean} - The copy daemon (v$version, $vDate)"
        out ""
        fi
        out "${txtBold}Usage:${txtClean}"
        out "  (1st) $me [<option>...] <dest-dir> <source>..."
        out "  (2nd) $me <command> [<argument>...]"
        out ""
        out "${txtBold}Options are:${txtClean}"
        out "  -o <cp-opt>        Add <cp-opt> to the called cp command"
        out "  -R                 Copy recursive"
        out "  -m                 Merge all files in <dest-dir>"
        out ""
        out "${txtBold}Commands are:${txtClean}"
        out "  -C <job-id>        Cancel a pending or kill a running job"
        out "  -D [<action>]      Print status and start/stop the daemon or job processing"
        out "                     <action> can be +|-|start|stop"
        if [[ $opt == "h" ]] ; then
        out "  -h [c]             Show this help or when c=l License, c=s Source of ${txtBold}$me${txtClean}"
        out "  -H                 Show more help"
        else
        out "  -h [c]             Show less help or when c=l License, c=s Source of ${txtBold}$me${txtClean}"
        out "  -H                 Show this help"
        fi
        out "  -l [c]             List jobs, c=i by ID, or errors c=e, or the job log c=l"
        out "  -P                 Process jobs or trigger daemon to continue"
        out "  -p <job-id> <prio> Change job priority 3-8"
        out "  -r <job-id>        Resume a job"
        out "  -s <job-id>        Stop a job"
        out "  -T                 Tidy up all job data"
#         out "  -t                 Tidy up done jobs (TODO)"
        if [[ $opt == "H" ]] ; then
        out ""
        out "${txtBold}Notes:${txtClean}"
        out "  â€¢ The first form schedule a new copy task"
        out "  â€¢ The second form list or change tasks"
        out "  â€¢ The job priority is not static and affect only the start time. Highest priority is 0"
        out "  â€¢ The executed copy command will be 'cp <cp-opt> --parents -t <dest-dir> <source>'"
        out "  â€¢ -D stops job processing, if so, or stops the daemon at all, if not"
        out "     Adding a new job trigger the daemon to continue job processing, there is no blocking"
        out "  â€¢ -T does nothing else than 'rm -rf $tmpDir'"
        out "  â€¢ -m removes --parents from options and add --backup=numbered"
        out "  â€¢ Enclose <cp-opt> in quotes if you need more than one option"
        out ""
        out "${txtBold}Examples:${txtClean}"
        out "  Enqueue new copy task"
        out "    $me /media/1a/foo /media/1b/foo"
        out ""
        out "  Show status"
        out "    $me -D"
        out ""
        fi
        exit ; ;;
  esac
done

OPTIND="1"
while getopts ?C:Dlmo:p:PRr:s:T opt
do

  case $opt in
    C)  cmdCancel $OPTARG         ; exit ; ;;
    D)  cmdDaemonize $@           ; exit ; ;;
    l)  shift $(( $OPTIND - 1 ))
        cmdList $1                ; exit ; ;;
    m)  optMerge="1"                     ; ;;
    o)  optExtraCopy="$OPTARG"           ; ;;
    P)  cmdProcess                ; exit ; ;;
    R)  optRecursive="1"                 ; ;;
    p)  shift $(( $OPTIND - 1 ))
        cmdChangePrio $OPTARG $@  ; exit ; ;;
    r)  cmdResume $OPTARG         ; exit ; ;;
    s)  cmdStop $OPTARG           ; exit ; ;;
    T)  cmdTidy                   ; exit ; ;;

    \?) exitError "Need help? Use: $me -h"  ; ;;
  esac
done

shift $(( $OPTIND - 1 ))

# At this point we have a new job to enqueue
[[ -d "$1" ]] || exitError "Destination must be a directory"
addNewJob "$@"
